Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp8266wifi
Library3=rmqtt
Library4=rrandomaccessfile
Module1=|relative|..\MQTTMod
Module2=|relative|..\Utils
Module3=|relative|..\WiFiMod
NumberOfFiles=0
NumberOfLibraries=4
NumberOfModules=3
Version=4
@EndOfDesignText@
' File:		Hawe_EnvSim.b4r
' Project:	Home Assistant Workbook Experiments (Hawe).
' Date: 	See globals VERSION
' Author:	Robert W.B. Linn
' Brief:	ESP32 environment simulator temperature, humidity, pressure to Home Assistant (HA).
'			Explore how to publish MQTT messages for AutoDiscovery & State.
' Hardware:	ESP32-Wrover Kit.
' Software:	B4R 4.00 (64 bit), Arduino-CLI 1.2.2, JDK 14.
' Notes:	MQTT payloads are hardcoded as global strings. Not making use of joinstrings or concatenation to avoid memory issues.
'			Long MQTT payloads like AutoDiscovery config, are send in chunks because payload length > 128.
'			HA entities created are: sensor.haweenv_temperature, sensor.haweenv_humidity, sensor.haweenv_pressure.
'			MQTT methods are using IDE logging.
'			MQTT Discovery Check Logic:
'			In B4R, MQTT messages arrive via events only — there is no background polling (unlike in MicroPython).
'			A dedicated timer (MQTTCheckEntityTimer) that waits For a retained message up To a defined timeout (e.g., 60 seconds) is the most reliable way.
'			It avoids blocking loops And makes it clear when the decision To publish discovery is made.
' Secrets:	Defined in WiFiMod & MQTTMod.
' Wiring:	Not used
' HA:		In HA card Hawe Env an additional entity is defined showing the last update for all Hawe entities.
'			See file hawe_sensors.yaml.
' DevInfo:	B4R v4.00 (64 bit), arduino-cli 1.22, Java JDK 14, Additional libraries rESP8266WiFi 1.60, rMQTT v1.40, rRandomAccessFile v1.91.

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

Sub Process_Globals
	Private VERSION As String = "Hawe_EnvSim v20250625"

	' Communication
	Public SerialLine As Serial
	Public Serial1 As Serial

	' MQTT
	Private MQTT_CLIENT_ID As String = "haweclient"

	' MQTT Availability
	Private MQTT_STATE_TOPIC_AVAILABILITY As String = "homeassistant/sensor/hawe/envsim/availability"

	' MQTT Temperature
	Private MQTT_CONFIG_TOPIC_TEMPERATURE As String = "homeassistant/sensor/hawe_envsim_temperature/config"
	Private MQTT_CONFIG_PAYLOAD_TEMPERATURE As String = _
		"{" _
		  """device_class"": ""temperature""," _
		  """name"": ""Temperature""," _
		  """state_topic"": ""hawe/envsim/temperature/state""," _
		  """unit_of_measurement"": ""°C""," _
		  """object_id"": ""hawe/envsim/temperature""," _
		  """unique_id"": ""hawe/envsim/temperature""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/envsim/availability""," _
		  """device"": { ""identifiers"": [""envsim""], ""name"": ""Hawe EnvSim""}" _
		"}"
	Private MQTT_STATE_TOPIC_TEMPERATURE As String = "hawe/envsim/temperature/state"

	' MQTT Humidity
	Private MQTT_CONFIG_TOPIC_HUMIDITY As String  = "homeassistant/sensor/hawe_envsim_humidity/config"
	Private MQTT_CONFIG_PAYLOAD_HUMIDITY As String = _
		"{" _
		  """device_class"": ""humidity""," _
		  """name"": ""Humidity""," _
		  """state_topic"": ""hawe/envsim/humidity/state""," _
		  """unit_of_measurement"": ""%""," _
		  """object_id"": ""hawe/envsim/humidity""," _
		  """unique_id"": ""hawe/envsim/humidity""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/envsim/availability""," _
		  """device"": { ""identifiers"": [""envsim""], ""name"": ""Hawe EnvSim""}" _
		"}"
	Private MQTT_STATE_TOPIC_HUMIDITY As String  = "hawe/envsim/humidity/state"

	' MQTT Pressure
	Private MQTT_CONFIG_TOPIC_PRESSURE As String  = "homeassistant/sensor/hawe_envsim_pressure/config"
	Private MQTT_CONFIG_PAYLOAD_PRESSURE As String = _
		"{" _
		  """device_class"": ""pressure""," _
		  """name"": ""Pressure""," _
		  """state_topic"": ""hawe/envsim/pressure/state""," _
		  """unit_of_measurement"": ""hPa""," _
		  """object_id"": ""hawe/envsim/pressure""," _
		  """unique_id"": ""hawe/envsim/pressure""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/envsim/availability""," _
		  """device"": { ""identifiers"": [""envsim""], ""name"": ""Hawe EnvSim""}" _
		"}"
	Private MQTT_STATE_TOPIC_PRESSURE As String  = "hawe/envsim/pressure/state"

	' Timer Check MQTTAD
	Private MQTTCheckEntityTimer As Timer
	Private MQTTCHECKENTITYTIMER_INTERVAL As ULong = 1000	' ms, every 1 second
	Private MQTTCHECKENTITYTIMER_MAX As UInt = 60			' check retained entity for max 60 seconds then publish MQTTAD
	Private CheckEntityTimerCounter As UInt = 0				'
	' Retained config topic detection
	Private TemperatureConfigReceived As Boolean = False

	' Timer Simulator
	Private SimulatorTimer As Timer
	Private SIMULATORTIMER_INTERVAL As ULong = 60000	' ms, every 60 seconds = 1 minute
	Private temperature As Float
	Private humidity As Int
	Private pressure As Float

End Sub

Private Sub AppStart
	SerialLine.Initialize(115200)
	Log(CRLF, "[AppStart]", VERSION)

	MQTTCheckEntityTimer.Initialize("MQTTCheckEntityTimer_Tick", MQTTCHECKENTITYTIMER_INTERVAL)
	MQTTCheckEntityTimer.Enabled = False

	SimulatorTimer.Initialize("SimulatorTimer_Tick", SIMULATORTIMER_INTERVAL)
	SimulatorTimer.Enabled = False

	WiFiMod.Connected = WiFiMod.Connect

	' Wifi connected
	If WiFiMod.Connected Then
		' Connect to the broker
		MQTTMod.Initialize(MQTT_CLIENT_ID, WiFiMod.Client.Stream)
		MQTTMod.Connect(0)
		Delay(1000)

		If MQTTMod.Connected Then
			' Start the retained state topic timer
			MQTTCheckEntityTimer.Enabled = True
			Log("[AppStart] Waiting for retained config messages...",MQTTCHECKENTITYTIMER_MAX,"s.")

			' Publish availability
			MQTTMod.Publish(Array As String(MQTT_STATE_TOPIC_AVAILABILITY), Array As String("online"))
			Delay(1000)

			' Subscribe to retained config topic (temperature only)
			MQTTMod.Subscribe(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE))
			Delay(1000)
		End If
	End If
End Sub

#Region Retained State Check
Private Sub MQTTCheckEntityTimer_Tick
	If MQTTMod.Connected == False Then Return

	' Increase the counter 	
	CheckEntityTimerCounter = CheckEntityTimerCounter + 1

	' Retained config topic has NOT been received - publish the config entities
	If CheckEntityTimerCounter == MQTTCHECKENTITYTIMER_MAX Then
		Log("[CheckEntityTimer_Tick] Discovery Entity not found > publishing MQTT discovery...")

		MQTTMod.Remove(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE, MQTT_CONFIG_TOPIC_HUMIDITY, MQTT_CONFIG_TOPIC_PRESSURE))
		Delay(1000)
		
		MQTTMod.Publish(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE, MQTT_CONFIG_TOPIC_HUMIDITY, MQTT_CONFIG_TOPIC_PRESSURE), _
						Array As String(MQTT_CONFIG_PAYLOAD_TEMPERATURE, MQTT_CONFIG_PAYLOAD_HUMIDITY, MQTT_CONFIG_PAYLOAD_PRESSURE))
		Delay(1000)

		' Set the flag so next if can start subscribing
		TemperatureConfigReceived = True
	End If

	' Retained config topic has been received
	If TemperatureConfigReceived Then
		' Stop the timer
		MQTTCheckEntityTimer.Enabled = False
		Log("[CheckEntityTimer_Tick] Discovery Entity found > timer stopped")

		' Subscribe to the state topics OPTIONAL
		' MQTTMod.Subscribe(Array As String(MQTT_STATE_TOPIC_TEMPERATURE, MQTT_STATE_TOPIC_HUMIDITY, MQTT_STATE_TOPIC_PRESSURE))

		SimulatorTimer.Enabled = True
		Log("[AppStart] Simulator started")
	End If
End Sub
#End Region

#Region Simulator
Private Sub SimulatorTimer_Tick
	If WiFiMod.Connected = False Then Return

	temperature = Rnd(180, 250) / 10.0
	humidity = Rnd(40, 70)
	pressure = Rnd(990, 1100)

	Log("[Simulator_Tick] t=", NumberFormat(temperature, 0, 1), _
		", h=", NumberFormat(humidity, 0, 0), ", p=", NumberFormat(pressure, 0, 0))

	MQTTMod.Publish(Array As String(MQTT_STATE_TOPIC_TEMPERATURE, MQTT_STATE_TOPIC_HUMIDITY, MQTT_STATE_TOPIC_PRESSURE), _
					Array As String(temperature, humidity, pressure))
End Sub
#End Region

#Region MQTT
Public Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Log("[MQTT_MessageArrived] topic=",Topic, ",payload=",Payload)

	' Check retained topic exists (only once)
	If Topic == MQTT_CONFIG_TOPIC_TEMPERATURE And Not(TemperatureConfigReceived) Then
		TemperatureConfigReceived = True
		Log("[MQTT_MessageArrived] Retained temperature state received, value=",Payload)
	End If
End Sub
#End Region
