Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp8266wifi
Library3=rmqtt
Library4=rrandomaccessfile
Library5=rsht20
Module1=|relative|..\MQTTMod
Module2=|relative|..\Utils
Module3=|relative|..\WiFiMod
NumberOfFiles=0
NumberOfLibraries=5
NumberOfModules=3
Version=4
@EndOfDesignText@
' File:		Hawe_SHT20.b4r
' Project:	Home Assistant Workbook Experiments (Hawe).
' Date: 	See globals VERSION
' Author:	Robert W.B. Linn
' Brief:	Read in regular intervals the temperature, humidity from an SHT20 sensor connected to an ESP32 and publish to Home Assistant (HA).
'			Publish also on-demand by a HA button (lovalace).
' Hardware:	ESP-Wroom-32, SHT20 modul ELV PAD4.
' Software:	B4R 4.00 (64 bit), Arduino-CLI 1.2.2, JDK 14.
' Secrets:	Defined in WiFiMod & MQTTMod.
' DevInfo:	B4R v4.00 (64 bit), arduino-cli 1.22, Java JDK 14, Additional libraries rESP8266WiFi 1.60, rMQTT 1.40, rRandomAccessFile 1.91, rSHT20 1.00
' Wiring:
' SHT20 = ESP32 - wire
' VCC = 3V3 - red
' SDA = GPIO21 - blue
' SCL = GPIO22 - green
' GND = GND - black
' HA:		A lovelace card is defined with the 3 entities.
'			If addition a button, which enables to request the data on-demand using request topic "hawe/sht20/get".
'			Ensur to subscribe to the request topic.
'			The YAML card configuration:
'			show_name: True
'			show_icon: True
'			Type: button
'			name: Get SHT20 Data
'			tap_action:
'			  action: call-service
'			  service: mqtt.publish
'			  data:
'			    topic: hawe/sht20/get
'			    payload: request
'			icon: mdi:refresh


#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

Sub Process_Globals
	Private VERSION As String = "Hawe_SHT20 v20250626"

	' Communication
	Public SerialLine As Serial
	Public Serial1 As Serial

	' MQTT
	Private MQTT_CLIENT_ID As String = "haweclient"

	' MQTT Availability
	Private MQTT_STATE_TOPIC_AVAILABILITY As String = "homeassistant/sensor/hawe/sht20/availability"

	' MQTT Temperature
	Private MQTT_CONFIG_TOPIC_TEMPERATURE As String = "homeassistant/sensor/hawe_sht20_temperature/config"
	Private MQTT_CONFIG_PAYLOAD_TEMPERATURE As String = _
		"{" _
		  """device_class"": ""temperature""," _
		  """name"": ""Temperature""," _
		  """state_topic"": ""hawe/sht20/temperature/state""," _
		  """unit_of_measurement"": ""°C""," _
		  """object_id"": ""hawe/sht20/temperature""," _
		  """unique_id"": ""hawe/sht20/temperature""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/sht20/availability""," _
		  """device"": { ""identifiers"": [""sht20""], ""name"": ""Hawe SHT20""}" _
		"}"
	Private MQTT_STATE_TOPIC_TEMPERATURE As String = "hawe/sht20/temperature/state"

	' MQTT Humidity
	Private MQTT_CONFIG_TOPIC_HUMIDITY As String  = "homeassistant/sensor/hawe_sht20_humidity/config"
	Private MQTT_CONFIG_PAYLOAD_HUMIDITY As String = _
		"{" _
		  """device_class"": ""humidity""," _
		  """name"": ""Humidity""," _
		  """state_topic"": ""hawe/sht20/humidity/state""," _
		  """unit_of_measurement"": ""%""," _
		  """object_id"": ""hawe/sht20/humidity""," _
		  """unique_id"": ""hawe/sht20/humidity""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/sht20/availability""," _
		  """device"": { ""identifiers"": [""sht20""], ""name"": ""Hawe SHT20""}" _
		"}"
	Private MQTT_STATE_TOPIC_HUMIDITY As String  = "hawe/sht20/humidity/state"

	' MQTT Pressure
	Private MQTT_CONFIG_TOPIC_DEWPOINT As String  = "homeassistant/sensor/hawe_sht20_dewpoint/config"
	Private MQTT_CONFIG_PAYLOAD_DEWPOINT As String = _
		"{" _
		  """device_class"": ""temperature""," _
		  """name"": ""Dewpoint""," _
		  """state_topic"": ""hawe/sht20/dewpoint/state""," _
		  """unit_of_measurement"": ""°C""," _
		  """object_id"": ""hawe/sht20/dewpoint""," _
		  """unique_id"": ""hawe/sht20/dewpoint""," _
		  """availability_topic"": ""homeassistant/sensor/hawe/sht20/availability""," _
		  """device"": { ""identifiers"": [""sht20""], ""name"": ""Hawe SHT20""}" _
		"}"
	Private MQTT_STATE_TOPIC_DEWPOINT As String  = "hawe/sht20/dewpoint/state"

	' MQTT Request triggered by HA button.
	' This topic is subscribed and handled by mqtt_messagearrived.
	' As a response the actual data is read and published (like the timer does)
	Private MQTT_REQUEST_TOPIC As String = "hawe/sht20/get"

	' Timer Check MQTTAD
	Private MQTTCheckEntityTimer As Timer
	Private MQTTCHECKENTITYTIMER_INTERVAL As ULong = 1000	' ms, every 1 second
	Private MQTTCHECKENTITYTIMER_MAX As UInt = 60			' check retained entity for max 60 seconds then publish MQTTAD
	Private CheckEntityTimerCounter As UInt = 0				'
	' Retained config topic detection
	Private TemperatureConfigReceived As Boolean = False

	' Timer Measurement
	Private MeasurementTimer As Timer
	Private MEASUREMENTTIMER_INTERVAL As ULong = 60000	' ms, every 60 seconds = 1 minute
	Private Temperature As Float
	Private Humidity As Int
	Private Dewpoint As Float

	' SHT20
	Private SHTSensor As SHT20
End Sub

Private Sub AppStart
	SerialLine.Initialize(115200)
	Log(CRLF, "[AppStart] ", VERSION)

	'Init the module
	If Not(SHTSensor.Initialize()) Then
		Log("[AppStart][ERROR] Can not init the SHT20. Check the wiring.")
		Return
	End If

	' Init the timer for checking the config entities
	MQTTCheckEntityTimer.Initialize("MQTTCheckEntityTimer_Tick", MQTTCHECKENTITYTIMER_INTERVAL)
	MQTTCheckEntityTimer.Enabled = False

	' Init the measurement timer reading data from the sht20
	MeasurementTimer.Initialize("MeasurementTimer_Tick", MEASUREMENTTIMER_INTERVAL)
	MeasurementTimer.Enabled = False

	' Connect to the WiFi
	WiFiMod.Connected = WiFiMod.Connect

	' Wifi connected
	If WiFiMod.Connected Then
		' Connect to the broker
		MQTTMod.Initialize(MQTT_CLIENT_ID, WiFiMod.Client.Stream)
		MQTTMod.Connect(0)
		Delay(1000)

		If MQTTMod.Connected Then
			' Start the retained state topic timer
			MQTTCheckEntityTimer.Enabled = True
			Log("[AppStart] Waiting for retained config messages...",MQTTCHECKENTITYTIMER_MAX,"s.")

			' Publish availability
			MQTTMod.Publish(Array As String(MQTT_STATE_TOPIC_AVAILABILITY), Array As String("online"))
			Delay(1000)

			' Subscribe to retained config topic (temperature only)
			MQTTMod.Subscribe(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE))
			Delay(1000)
		End If
	End If
End Sub

#Region Retained State Check
Private Sub MQTTCheckEntityTimer_Tick
	If MQTTMod.Connected == False Then Return

	' Increase the counter 	
	CheckEntityTimerCounter = CheckEntityTimerCounter + 1

	' Retained config topic has NOT been received - publish the config entities
	If CheckEntityTimerCounter == MQTTCHECKENTITYTIMER_MAX Then
		Log("[CheckEntityTimer_Tick] Discovery Entity not found > publishing MQTT discovery...")

		MQTTMod.Remove(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE, MQTT_CONFIG_TOPIC_HUMIDITY, MQTT_CONFIG_TOPIC_DEWPOINT))
		Delay(1000)
		
		MQTTMod.Publish(Array As String(MQTT_CONFIG_TOPIC_TEMPERATURE, MQTT_CONFIG_TOPIC_HUMIDITY, MQTT_CONFIG_TOPIC_DEWPOINT), _
						Array As String(MQTT_CONFIG_PAYLOAD_TEMPERATURE, MQTT_CONFIG_PAYLOAD_HUMIDITY, MQTT_CONFIG_PAYLOAD_DEWPOINT))
		Delay(1000)

		' Set the flag so next if can start subscribing
		TemperatureConfigReceived = True
	End If

	' Retained config topic has been received
	If TemperatureConfigReceived Then
		' Stop the timer
		MQTTCheckEntityTimer.Enabled = False
		Log("[CheckEntityTimer_Tick] Discovery Entity found > timer stopped")

		' Subscribe to the state topics
		MQTTMod.Subscribe(Array As String( _ 
			MQTT_REQUEST_TOPIC))
		'It is not required to listen to sht20 sensor data state topics as these are published only.
		'MQTT_STATE_TOPIC_TEMPERATURE, _
		'MQTT_STATE_TOPIC_HUMIDITY, _
		'MQTT_STATE_TOPIC_DEWPOINT, _

		MeasurementTimer.Enabled = True
		Log("[AppStart] Measurement started")
	End If
End Sub
#End Region

#Region Measurement
Private Sub MeasurementTimer_Tick
	If WiFiMod.Connected = False Then Return

	' Read the data from the sensor
	Dim result As Boolean = SHTSensor.Measure
	If result Then
		Temperature = SHTSensor.Temperature
		Humidity = SHTSensor.Humidity
		Dewpoint = SHTSensor.Dewpoint(SHTSensor.Temperature, SHTSensor.Humidity)
		Log("[MeasurementTimer_Tick] t=",Temperature,"h=", Humidity,",dp=", Dewpoint)
		MQTTMod.Publish(Array As String(MQTT_STATE_TOPIC_TEMPERATURE, MQTT_STATE_TOPIC_HUMIDITY, MQTT_STATE_TOPIC_DEWPOINT), _
					    Array As String(Temperature, Humidity, Dewpoint))
	Else
		Log("[MeasurementTimer_Tick][ERROR] Can not read the SHT20 sensor data. Measurement timer stopped.")
		MeasurementTimer.Enabled = False
	End If
End Sub
#End Region

#Region MQTT
Public Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Log("[MQTT_MessageArrived] topic=",Topic, ",payload=",Payload)

	' Check retained topic exists (only once)
	If Topic == MQTT_CONFIG_TOPIC_TEMPERATURE And Not(TemperatureConfigReceived) Then
		TemperatureConfigReceived = True
		Log("[MQTT_MessageArrived] Retained temperature state received, value=",Payload)
	End If
	
	' Check if HA has sent a request for data
	If Topic == MQTT_REQUEST_TOPIC Then
		Log("[MQTT_MessageArrived] Received HA request for data > MeasurementTimer_Tick called.")
		' Just call the timer tick
		MeasurementTimer_Tick
	End If
End Sub
#End Region
