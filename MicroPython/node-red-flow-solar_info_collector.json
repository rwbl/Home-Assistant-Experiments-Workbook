[
    {
        "id": "931769d8c178cb26",
        "type": "tab",
        "label": "Solar Info Collector",
        "disabled": false,
        "info": "Solar Info Collector\r\n\r\nCollect data from solar power entities and create a JSON object.\r\n\r\nExample:\r\n{\r\n    \"power_time_stamp\": 1841,\r\n    \"power_date_stamp\": 20250619,\r\n    \"power_battery_charge\": 100,\r\n    \"power_from_battery\": 0,\r\n    \"power_to_battery\": 0,\r\n    \"power_to_house\": 258,\r\n    \"power_to_grid\": 1456,\r\n    \"power_from_grid\": 0,\r\n    \"power_from_solar\": 1714\r\n}\r\n",
        "env": []
    },
    {
        "id": "e871d476bbd40c30",
        "type": "comment",
        "z": "931769d8c178cb26",
        "name": "Solar Info Collector",
        "info": "**Solar Info Collector**\n\nFetch every minute the solar data using the HA current state for the 9 entities.\n\n```\nsensor.power_from_solar\nsensor.power_from_grid\nsensor.power_to_grid\nsensor.power_to_house\nsensor.power_to_battery\nsensor.power_from_battery\nsensor.power_battery_charge\nsensor.power_date_stamp\nsensor.power_time_stamp\n```\n\n**Output**\nCreate a JSON object and publish to MQTT the helper topic:\n`hawe/solar_info/helper`\n\n**Payload**\n```\n{\n    \"power_to_house\": 161,\n    \"power_date_stamp\": 20250620,\n    \"power_from_solar\": 3306,\n    \"power_from_grid\": 0,\n    \"power_to_grid\": 3145,\n    \"power_time_stamp\": 753,\n    \"power_battery_charge\": 100,\n    \"power_to_battery\": 0,\n    \"power_from_battery\": 0\n}\n```",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "bfbeb6e65f36c33c",
        "type": "inject",
        "z": "931769d8c178cb26",
        "name": "Every Minute",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "30d5393df6b635fc",
                "95f1b81db7f0ceef",
                "d8ca1b28cc306352",
                "3e5e05e06c16434e",
                "77df18ccef9dd83a",
                "f2c90d067d7d37e9",
                "0685b5e4e93f57ef",
                "d8de576fb7c7187f",
                "9ef97a67dd3f5233"
            ]
        ]
    },
    {
        "id": "e97a46e4311a1f6b",
        "type": "join",
        "z": "931769d8c178cb26",
        "name": "Join all values",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": ",",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 800,
        "y": 80,
        "wires": [
            [
                "ee7ecfa8e9630e5c"
            ]
        ]
    },
    {
        "id": "ee7ecfa8e9630e5c",
        "type": "function",
        "z": "931769d8c178cb26",
        "name": "Build JSON",
        "func": "// Map keys from HA sensor entity names to your desired keys\nconst keyMap = {\n    \"sensor.power_from_solar\": \"power_from_solar\",\n    \"sensor.power_from_grid\": \"power_from_grid\",\n    \"sensor.power_to_grid\": \"power_to_grid\",\n    \"sensor.power_to_house\": \"power_to_house\",\n    \"sensor.power_to_battery\": \"power_to_battery\",\n    \"sensor.power_from_battery\": \"power_from_battery\",\n    \"sensor.power_battery_charge\": \"power_battery_charge\",\n    \"sensor.power_date_stamp\": \"power_date_stamp\",\n    \"sensor.power_time_stamp\": \"power_time_stamp\"\n};\n\nlet input = msg.payload;\nlet result = {};\n\nfor (let key in input) {\n    let mappedKey = keyMap[key] || key;\n    let value = input[key];\n\n    // Convert to number when possible\n    let numeric = Number(value);\n    result[mappedKey] = isNaN(numeric) ? value : numeric;\n}\n\nmsg.topic = \"hawe/solar_info/helper\";\nmsg.payload = JSON.stringify(result);\n\nnode.warn(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "62fd3a81c5ac3291"
            ]
        ]
    },
    {
        "id": "62fd3a81c5ac3291",
        "type": "mqtt out",
        "z": "931769d8c178cb26",
        "name": "Publish JSON Helper",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "30d5393df6b635fc",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_time_stamp",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "95f1b81db7f0ceef",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_date_stamp",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 500,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "d8ca1b28cc306352",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_battery_charge",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 430,
        "y": 440,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "3e5e05e06c16434e",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_from_battery",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "77df18ccef9dd83a",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_to_battery",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "f2c90d067d7d37e9",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_to_house",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "0685b5e4e93f57ef",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_to_grid",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 400,
        "y": 200,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "d8de576fb7c7187f",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_from_grid",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "9ef97a67dd3f5233",
        "type": "api-current-state",
        "z": "931769d8c178cb26",
        "name": "",
        "server": "4a350a58.f189d4",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.power_from_solar",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "e97a46e4311a1f6b"
            ]
        ]
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a350a58.f189d4",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    }
]